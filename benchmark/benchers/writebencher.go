package benchers

import (
	"bytes"
	"fmt"
	"time"

	"github.com/zero-os/0-stor/benchmark/config"
	"github.com/zero-os/0-stor/client"

	log "github.com/Sirupsen/logrus"
)

//WriteBencher represents a writing benchmarker
type WriteBencher struct {
	client     *client.Client
	scenario   *config.Scenario
	scenarioID string
	keys       [][]byte
	value      []byte
}

// NewWriteBencher returns a new WriteBencher
// Amount of keys are generated by number of `Operations` set in the benchconfig
// if `Operations` was 0 or less, the amount of keys will be `defaultKeyCount`
func NewWriteBencher(scenarioID string, scenario *config.Scenario) (Benchmarker, error) {
	wb := new(WriteBencher)

	wb.scenarioID = scenarioID
	wb.scenario = scenario
	var keys int
	if scenario.BenchConf.Operations <= 0 {
		keys = defaultKeyCount
	} else {
		keys = scenario.BenchConf.Operations
	}

	// generate data
	for i := 0; i < keys; i++ {
		wb.keys = append(wb.keys, generateData(scenario.BenchConf.KeySize))
	}
	wb.value = generateData(scenario.BenchConf.ValueSize)

	// initializing client
	config.SetupClientConfig(&scenario.ZstorConf)
	var err error
	wb.client, err = newClientFromConfig(&scenario.ZstorConf, 1, true)
	if err != nil {
		log.Errorf("Error creating client: %v", err)
		return nil, fmt.Errorf("Failed creating client: %v", err)
	}

	return wb, nil
}

//RunBenchmark implements Method.RunBenchmark
func (wb *WriteBencher) RunBenchmark() (*Result, error) {
	if wb.client == nil {
		log.Error("zstor client is nil when trying to run a write bencher")
		return nil, fmt.Errorf("zstor client is nil")
	}

	var timeout <-chan time.Time
	if wb.scenario.BenchConf.Duration > 0 {
		timeout = time.After(time.Duration(wb.scenario.BenchConf.Duration) * time.Second)
	}

	// set up data aggregation interval
	interval := ResultOptions[wb.scenario.BenchConf.Output]

	var (
		tick            = time.Tick(interval)
		start           time.Time
		counter         int64
		intervalCounter int64
		result          = &Result{}
		keysLen         = len(wb.keys)
		maxIterations   = wb.scenario.BenchConf.Operations
	)

	start = time.Now()
	for i := 0; ; i++ {
		// loop over the available keys
		key := wb.keys[i%keysLen]

		select {
		case <-timeout:
			goto LoopExit
		case <-tick:
			result.PerInterval = append(result.PerInterval, intervalCounter)
			intervalCounter = 0
		default:
			// if BenchConfig.Operations is <= 0, keep looping till timeout
			if maxIterations > 0 && i == maxIterations {
				goto LoopExit
			}
			_, err := wb.client.Write(key, bytes.NewReader(wb.value))
			if err != nil {
				log.Errorf("Error write request to client: %v", err)
				return nil, err
			}
			intervalCounter++
			counter++
		}
	}

LoopExit:
	result.Duration = Duration{time.Since(start)}
	result.Count = counter
	if intervalCounter != 0 {
		result.PerInterval = append(result.PerInterval, intervalCounter)
	}

	return result, nil
}
